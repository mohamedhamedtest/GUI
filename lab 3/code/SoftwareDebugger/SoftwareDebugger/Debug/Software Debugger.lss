
Software Debugger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000037e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800064  00800064  00000416  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc7  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ff  00000000  00000000  000010e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a5  00000000  00000000  000018e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000295  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define BAUD_RATE 9600

// Main
int main(void) {

    SDEBUG_Init();
  92:	0e 94 58 00 	call	0xb0	; 0xb0 <SDEBUG_Init>
    
    sei();
  96:	78 94       	sei
    
	while (1)
    {
        SDEBUG_MainFunction();
  98:	0e 94 7b 00 	call	0xf6	; 0xf6 <SDEBUG_MainFunction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e3       	ldi	r18, 0x3F	; 63
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x1a>
  ac:	00 00       	nop
  ae:	f4 cf       	rjmp	.-24     	; 0x98 <main+0x6>

000000b0 <SDEBUG_Init>:
 */
static uint8_t cmd_buffer[FULL_CMD_CNT];

// Function to initialize debugger
void SDEBUG_Init(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <SDEBUG_Init+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <SDEBUG_Init+0x8>
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
    
    // Initialize UART driver
    UART_cfg my_uart_cfg;
    
    // Set USART mode
    my_uart_cfg.UBRRL_cfg = (BAUD_RATE_VALUE)&0x00FF;
  be:	83 e3       	ldi	r24, 0x33	; 51
  c0:	8a 83       	std	Y+2, r24	; 0x02
    my_uart_cfg.UBRRH_cfg = (((BAUD_RATE_VALUE)&0xFF00)>>8);
  c2:	19 82       	std	Y+1, r1	; 0x01
    
    my_uart_cfg.UCSRA_cfg = 0;
  c4:	1b 82       	std	Y+3, r1	; 0x03
    my_uart_cfg.UCSRB_cfg = (1<<RXEN)  | (1<<TXEN) | (1<<TXCIE) | (1<<RXCIE);
  c6:	88 ed       	ldi	r24, 0xD8	; 216
  c8:	8c 83       	std	Y+4, r24	; 0x04
    my_uart_cfg.UCSRC_cfg = (1<<URSEL) | (3<<UCSZ0);
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	8d 83       	std	Y+5, r24	; 0x05
    
    UART_Init(&my_uart_cfg);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Init>
  d6:	e4 e6       	ldi	r30, 0x64	; 100
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8c e6       	ldi	r24, 0x6C	; 108
  dc:	90 e0       	ldi	r25, 0x00	; 0
    
    // Clear cmd_buffer
    for(i = 0; i < FULL_CMD_CNT; i += 1)
    {
        cmd_buffer[i] = 0;
  de:	11 92       	st	Z+, r1
    my_uart_cfg.UCSRC_cfg = (1<<URSEL) | (3<<UCSZ0);
    
    UART_Init(&my_uart_cfg);
    
    // Clear cmd_buffer
    for(i = 0; i < FULL_CMD_CNT; i += 1)
  e0:	e8 17       	cp	r30, r24
  e2:	f9 07       	cpc	r31, r25
  e4:	e1 f7       	brne	.-8      	; 0xde <SDEBUG_Init+0x2e>
    {
        cmd_buffer[i] = 0;
    }
}
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <SDEBUG_MainFunction>:

// Debugger main
void SDEBUG_MainFunction(void)
{
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	00 d0       	rcall	.+0      	; 0x104 <SDEBUG_MainFunction+0xe>
 104:	00 d0       	rcall	.+0      	; 0x106 <SDEBUG_MainFunction+0x10>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t *address;
    uint8_t value;
    
    // Send terminal prompt
    UART_SendPayload((uint8_t *)">", 1);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART_SendPayload>
    while (0 == UART_IsTxComplete());
 116:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <UART_IsTxComplete>
 11a:	88 23       	and	r24, r24
 11c:	e1 f3       	breq	.-8      	; 0x116 <SDEBUG_MainFunction+0x20>
    
    // Receive the full buffer command
    UART_ReceivePayload(cmd_buffer, FULL_CMD_CNT);
 11e:	68 e0       	ldi	r22, 0x08	; 8
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	84 e6       	ldi	r24, 0x64	; 100
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 6e 01 	call	0x2dc	; 0x2dc <UART_ReceivePayload>
    
    // Pull until reception is complete
    while(0 == UART_IsRxComplete());
 12a:	0e 94 89 01 	call	0x312	; 0x312 <UART_IsRxComplete>
 12e:	88 23       	and	r24, r24
 130:	e1 f3       	breq	.-8      	; 0x12a <SDEBUG_MainFunction+0x34>

    // Compute address
    {
        char address_buffer[_CMD_ADDRESS_CNT];
        
        address_buffer[0] = cmd_buffer[ADDRESS_OFFSET];
 132:	04 e6       	ldi	r16, 0x64	; 100
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	f8 01       	movw	r30, r16
 138:	82 81       	ldd	r24, Z+2	; 0x02
 13a:	8a 83       	std	Y+2, r24	; 0x02
        address_buffer[1] = cmd_buffer[ADDRESS_OFFSET+1];
 13c:	83 81       	ldd	r24, Z+3	; 0x03
 13e:	8b 83       	std	Y+3, r24	; 0x03
        
        address = ((volatile uint8_t *)atoi(address_buffer));
 140:	ce 01       	movw	r24, r28
 142:	02 96       	adiw	r24, 0x02	; 2
 144:	0e 94 97 01 	call	0x32e	; 0x32e <atoi>
 148:	7c 01       	movw	r14, r24
    
    // Compute value
    {
        char value_buffer[_CMD_DATA_CNT];
        
        value_buffer[0] = cmd_buffer[DATA_OFFSET];
 14a:	f8 01       	movw	r30, r16
 14c:	84 81       	ldd	r24, Z+4	; 0x04
 14e:	8a 83       	std	Y+2, r24	; 0x02
        value_buffer[1] = cmd_buffer[DATA_OFFSET + 1];
 150:	85 81       	ldd	r24, Z+5	; 0x05
 152:	8b 83       	std	Y+3, r24	; 0x03
        value_buffer[2] = cmd_buffer[DATA_OFFSET + 2];
 154:	86 81       	ldd	r24, Z+6	; 0x06
 156:	8c 83       	std	Y+4, r24	; 0x04
        
        value = (uint8_t)atoi(value_buffer);
 158:	ce 01       	movw	r24, r28
 15a:	02 96       	adiw	r24, 0x02	; 2
 15c:	0e 94 97 01 	call	0x32e	; 0x32e <atoi>
 160:	89 83       	std	Y+1, r24	; 0x01
    }

    // Parse command buffer
    switch(cmd_buffer[1])
 162:	f8 01       	movw	r30, r16
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	97 35       	cpi	r25, 0x57	; 87
 168:	41 f0       	breq	.+16     	; 0x17a <SDEBUG_MainFunction+0x84>
 16a:	18 f4       	brcc	.+6      	; 0x172 <SDEBUG_MainFunction+0x7c>
 16c:	92 35       	cpi	r25, 0x52	; 82
 16e:	41 f0       	breq	.+16     	; 0x180 <SDEBUG_MainFunction+0x8a>
 170:	10 c0       	rjmp	.+32     	; 0x192 <SDEBUG_MainFunction+0x9c>
 172:	92 37       	cpi	r25, 0x72	; 114
 174:	29 f0       	breq	.+10     	; 0x180 <SDEBUG_MainFunction+0x8a>
 176:	97 37       	cpi	r25, 0x77	; 119
 178:	61 f4       	brne	.+24     	; 0x192 <SDEBUG_MainFunction+0x9c>
    {
        case 'w':
        case 'W':
        {
            /* Write received value to selected address. */
            *(address) = value;
 17a:	f7 01       	movw	r30, r14
 17c:	80 83       	st	Z, r24
            break;
 17e:	09 c0       	rjmp	.+18     	; 0x192 <SDEBUG_MainFunction+0x9c>
        }
        case 'r':
        case 'R':
        {
            value = *(address);
 180:	f7 01       	movw	r30, r14
 182:	80 81       	ld	r24, Z
 184:	89 83       	std	Y+1, r24	; 0x01
            
            /* Send read value from received address. */
            UART_SendPayload(&value, 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART_SendPayload>
            
        }
        default:  { /* Do nothing. */}
    }
    
    UART_SendPayload((uint8_t *)"\r", 1);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	82 e6       	ldi	r24, 0x62	; 98
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART_SendPayload>
}
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <__vector_11>:
static volatile uint16_t rx_len;
static volatile uint16_t rx_cnt;

// UART interrupt
ISR(USART_RXC_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
    uint8_t rx_data;
    
    cli();
 1ce:	f8 94       	cli
    
    /* Read rx_data. */
    rx_data = UDR;
 1d0:	8c b1       	in	r24, 0x0c	; 12
    
    /* Ignore spaces */
    if((rx_cnt < rx_len) && (rx_data != ' '))
 1d2:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <rx_cnt>
 1d6:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <rx_cnt+0x1>
 1da:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <rx_len>
 1de:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <rx_len+0x1>
 1e2:	42 17       	cp	r20, r18
 1e4:	53 07       	cpc	r21, r19
 1e6:	b0 f4       	brcc	.+44     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 1e8:	80 32       	cpi	r24, 0x20	; 32
 1ea:	a1 f0       	breq	.+40     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
    {
        rx_buffer[rx_cnt] = rx_data;
 1ec:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <rx_cnt>
 1f0:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <rx_cnt+0x1>
 1f4:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <rx_buffer>
 1f8:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <rx_buffer+0x1>
 1fc:	e2 0f       	add	r30, r18
 1fe:	f3 1f       	adc	r31, r19
 200:	80 83       	st	Z, r24
        rx_cnt++;
 202:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <rx_cnt>
 206:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <rx_cnt+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <rx_cnt+0x1>
 210:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <rx_cnt>
    else
    {
        /* Do nothing. */
    }
    
    sei();
 214:	78 94       	sei
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_13>:

// UART interrupt
ISR(USART_TXC_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
    cli();
 246:	f8 94       	cli
    
    tx_cnt++;
 248:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <tx_cnt>
 24c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <tx_cnt+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <tx_cnt+0x1>
 256:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <tx_cnt>
    
    if(tx_cnt < tx_len)
 25a:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <tx_cnt>
 25e:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <tx_cnt+0x1>
 262:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <tx_len>
 266:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <tx_len+0x1>
 26a:	28 17       	cp	r18, r24
 26c:	39 07       	cpc	r19, r25
 26e:	60 f4       	brcc	.+24     	; 0x288 <__vector_13+0x58>
    {
        /* Send next byte. */
        UDR = tx_buffer[tx_cnt];
 270:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <tx_cnt>
 274:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <tx_cnt+0x1>
 278:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <tx_buffer>
 27c:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <tx_buffer+0x1>
 280:	e8 0f       	add	r30, r24
 282:	f9 1f       	adc	r31, r25
 284:	80 81       	ld	r24, Z
 286:	8c b9       	out	0x0c, r24	; 12
    }
    sei();
 288:	78 94       	sei
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <UART_Init>:

// UART initialize
void UART_Init(UART_cfg *my_cfg)
{
 2a0:	fc 01       	movw	r30, r24
    /* Set baud rate */
    UBRRH = my_cfg->UBRRH_cfg;
 2a2:	80 81       	ld	r24, Z
 2a4:	80 bd       	out	0x20, r24	; 32
    UBRRL = my_cfg->UBRRL_cfg;
 2a6:	81 81       	ldd	r24, Z+1	; 0x01
 2a8:	89 b9       	out	0x09, r24	; 9
    
    UCSRA = my_cfg->UCSRA_cfg;
 2aa:	82 81       	ldd	r24, Z+2	; 0x02
 2ac:	8b b9       	out	0x0b, r24	; 11
    UCSRB = my_cfg->UCSRB_cfg;
 2ae:	83 81       	ldd	r24, Z+3	; 0x03
 2b0:	8a b9       	out	0x0a, r24	; 10
    UCSRC = my_cfg->UCSRC_cfg;
 2b2:	84 81       	ldd	r24, Z+4	; 0x04
 2b4:	80 bd       	out	0x20, r24	; 32
 2b6:	08 95       	ret

000002b8 <UART_SendPayload>:
}

// UART transmitter
void UART_SendPayload(uint8_t *tx_data, uint16_t len)
{
    tx_buffer = tx_data;
 2b8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <tx_buffer+0x1>
 2bc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <tx_buffer>
    tx_len    = len;
 2c0:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <tx_len+0x1>
 2c4:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <tx_len>
    tx_cnt    = 0;
 2c8:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <tx_cnt+0x1>
 2cc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <tx_cnt>
    
    /* Wait for UDR is empty. */
    while(0 == (UCSRA & (1 << UDRE)));
 2d0:	5d 9b       	sbis	0x0b, 5	; 11
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <UART_SendPayload+0x18>
    
    /* Send the first byte to trigger the TxC interrupt. */
    UDR = tx_buffer[0];
 2d4:	fc 01       	movw	r30, r24
 2d6:	80 81       	ld	r24, Z
 2d8:	8c b9       	out	0x0c, r24	; 12
 2da:	08 95       	ret

000002dc <UART_ReceivePayload>:
}

// UART receiver
void UART_ReceivePayload(uint8_t *rx_data, uint16_t len)
{
    rx_buffer = rx_data;
 2dc:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <rx_buffer+0x1>
 2e0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <rx_buffer>
    rx_len    = len;
 2e4:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <rx_len+0x1>
 2e8:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <rx_len>
    rx_cnt    = 0;
 2ec:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <rx_cnt+0x1>
 2f0:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <rx_cnt>
 2f4:	08 95       	ret

000002f6 <UART_IsTxComplete>:
}

// Check if transmitter is complete
uint8_t UART_IsTxComplete(void)
{
    return ( (tx_cnt >= tx_len) ? 1 : 0 );
 2f6:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <tx_cnt>
 2fa:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <tx_cnt+0x1>
 2fe:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <tx_len>
 302:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <tx_len+0x1>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	42 17       	cp	r20, r18
 30a:	53 07       	cpc	r21, r19
 30c:	08 f4       	brcc	.+2      	; 0x310 <UART_IsTxComplete+0x1a>
 30e:	80 e0       	ldi	r24, 0x00	; 0
}
 310:	08 95       	ret

00000312 <UART_IsRxComplete>:

// Check if receiver is complete
uint8_t UART_IsRxComplete(void)
{
    return ( (rx_cnt >= rx_len) ? 1 : 0 );
 312:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <rx_cnt>
 316:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <rx_cnt+0x1>
 31a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <rx_len>
 31e:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <rx_len+0x1>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	42 17       	cp	r20, r18
 326:	53 07       	cpc	r21, r19
 328:	08 f4       	brcc	.+2      	; 0x32c <UART_IsRxComplete+0x1a>
 32a:	80 e0       	ldi	r24, 0x00	; 0
}
 32c:	08 95       	ret

0000032e <atoi>:
 32e:	fc 01       	movw	r30, r24
 330:	88 27       	eor	r24, r24
 332:	99 27       	eor	r25, r25
 334:	e8 94       	clt
 336:	21 91       	ld	r18, Z+
 338:	20 32       	cpi	r18, 0x20	; 32
 33a:	e9 f3       	breq	.-6      	; 0x336 <atoi+0x8>
 33c:	29 30       	cpi	r18, 0x09	; 9
 33e:	10 f0       	brcs	.+4      	; 0x344 <atoi+0x16>
 340:	2e 30       	cpi	r18, 0x0E	; 14
 342:	c8 f3       	brcs	.-14     	; 0x336 <atoi+0x8>
 344:	2b 32       	cpi	r18, 0x2B	; 43
 346:	41 f0       	breq	.+16     	; 0x358 <atoi+0x2a>
 348:	2d 32       	cpi	r18, 0x2D	; 45
 34a:	39 f4       	brne	.+14     	; 0x35a <atoi+0x2c>
 34c:	68 94       	set
 34e:	04 c0       	rjmp	.+8      	; 0x358 <atoi+0x2a>
 350:	0e 94 b5 01 	call	0x36a	; 0x36a <__mulhi_const_10>
 354:	82 0f       	add	r24, r18
 356:	91 1d       	adc	r25, r1
 358:	21 91       	ld	r18, Z+
 35a:	20 53       	subi	r18, 0x30	; 48
 35c:	2a 30       	cpi	r18, 0x0A	; 10
 35e:	c0 f3       	brcs	.-16     	; 0x350 <atoi+0x22>
 360:	1e f4       	brtc	.+6      	; 0x368 <atoi+0x3a>
 362:	90 95       	com	r25
 364:	81 95       	neg	r24
 366:	9f 4f       	sbci	r25, 0xFF	; 255
 368:	08 95       	ret

0000036a <__mulhi_const_10>:
 36a:	7a e0       	ldi	r23, 0x0A	; 10
 36c:	97 9f       	mul	r25, r23
 36e:	90 2d       	mov	r25, r0
 370:	87 9f       	mul	r24, r23
 372:	80 2d       	mov	r24, r0
 374:	91 0d       	add	r25, r1
 376:	11 24       	eor	r1, r1
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
