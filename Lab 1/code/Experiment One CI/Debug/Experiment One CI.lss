
Experiment One CI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000722  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060a  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bd  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  64:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_Timer0_Init>:
#include <util/delay.h>

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
	
	TCNT0 = 0; //Set Timer Initial value
  6c:	12 be       	out	0x32, r1	; 50
	
	OCR0  = set_duty_cycle; // Set Compare Value
  6e:	8c bf       	out	0x3c, r24	; 60
	
	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
  70:	87 b3       	in	r24, 0x17	; 23
  72:	88 60       	ori	r24, 0x08	; 8
  74:	87 bb       	out	0x17, r24	; 23
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  76:	8a e6       	ldi	r24, 0x6A	; 106
  78:	83 bf       	out	0x33, r24	; 51
  7a:	08 95       	ret

0000007c <Increase_Speed>:
}
void Increase_Speed(unsigned char duty_cycle)
{
  7c:	cf 92       	push	r12
  7e:	df 92       	push	r13
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f e9       	ldi	r18, 0x9F	; 159
  86:	36 e8       	ldi	r19, 0x86	; 134
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <Increase_Speed+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <Increase_Speed+0x18>
  94:	00 00       	nop
	 _delay_ms(500);
	 if(duty_cycle < 255)
  96:	8f 3f       	cpi	r24, 0xFF	; 255
  98:	b9 f0       	breq	.+46     	; 0xc8 <Increase_Speed+0x4c>
	duty_cycle+=(duty_cycle*0.5);
  9a:	68 2f       	mov	r22, r24
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 67 01 	call	0x2ce	; 0x2ce <__floatsisf>
  a6:	6b 01       	movw	r12, r22
  a8:	7c 01       	movw	r14, r24
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	5f e3       	ldi	r21, 0x3F	; 63
  b2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
  b6:	9b 01       	movw	r18, r22
  b8:	ac 01       	movw	r20, r24
  ba:	c7 01       	movw	r24, r14
  bc:	b6 01       	movw	r22, r12
  be:	0e 94 ca 00 	call	0x194	; 0x194 <__addsf3>
  c2:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
  c6:	86 2f       	mov	r24, r22
	OCR0 = duty_cycle;
  c8:	8c bf       	out	0x3c, r24	; 60
	
}
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	08 95       	ret

000000d4 <Decrease_Speed>:
void Decrease_Speed(unsigned char duty_cycle)
{
  d4:	cf 92       	push	r12
  d6:	df 92       	push	r13
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	2f e9       	ldi	r18, 0x9F	; 159
  de:	36 e8       	ldi	r19, 0x86	; 134
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <Decrease_Speed+0xe>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Decrease_Speed+0x18>
  ec:	00 00       	nop
	 _delay_ms(500);
	 if(duty_cycle > 0)
  ee:	88 23       	and	r24, r24
  f0:	b9 f0       	breq	.+46     	; 0x120 <Decrease_Speed+0x4c>
	duty_cycle-=(duty_cycle*0.5);
  f2:	68 2f       	mov	r22, r24
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 67 01 	call	0x2ce	; 0x2ce <__floatsisf>
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	5f e3       	ldi	r21, 0x3F	; 63
 10a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
 10e:	9b 01       	movw	r18, r22
 110:	ac 01       	movw	r20, r24
 112:	c7 01       	movw	r24, r14
 114:	b6 01       	movw	r22, r12
 116:	0e 94 c9 00 	call	0x192	; 0x192 <__subsf3>
 11a:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 11e:	86 2f       	mov	r24, r22
	 OCR0 = duty_cycle;
 120:	8c bf       	out	0x3c, r24	; 60
}
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	cf 90       	pop	r12
 12a:	08 95       	ret

0000012c <main>:

int main(void)
{ 
	PWM_Timer0_Init(128); //generate duty cycle 50% to get half motor speed
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Timer0_Init>
	
	/* configure pin PA0, PA1 and PA2 as input pins */
	DDRA &= 0xF8;
 132:	8a b3       	in	r24, 0x1a	; 26
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	8a bb       	out	0x1a, r24	; 26

	/* configure pin PC0 and PC1 as output pins */
	DDRC |= 0x03;
 138:	84 b3       	in	r24, 0x14	; 20
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	84 bb       	out	0x14, r24	; 20
	
	/* Motor is stop at the beginning */
	PORTC &= 0xFC;
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	8c 7f       	andi	r24, 0xFC	; 252
 142:	85 bb       	out	0x15, r24	; 21
	 
    while(1)
    {
		/* check if the first push button at PA0 is pressed/not */
		if(PINA & (1<<PA0))
 144:	c8 9b       	sbis	0x19, 0	; 25
 146:	07 c0       	rjmp	.+14     	; 0x156 <main+0x2a>
		{
			// Rotate the motor --> clock wise
			PORTC &= (~(1<<PC0));
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	85 bb       	out	0x15, r24	; 21
			PORTC |= (1<<PC1);
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	82 60       	ori	r24, 0x02	; 2
 152:	85 bb       	out	0x15, r24	; 21
 154:	f7 cf       	rjmp	.-18     	; 0x144 <main+0x18>
		}
		
		/* check if the second push button at PA1 is pressed/not */
		else if(PINA & (1<<PA1))
 156:	c9 9b       	sbis	0x19, 1	; 25
 158:	07 c0       	rjmp	.+14     	; 0x168 <main+0x3c>
		{
			// Rotate the motor --> anti-clock wise
			PORTC |= (1<<PC0);
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	85 bb       	out	0x15, r24	; 21
			PORTC &= (~(1<<PC1));
 160:	85 b3       	in	r24, 0x15	; 21
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	85 bb       	out	0x15, r24	; 21
 166:	ee cf       	rjmp	.-36     	; 0x144 <main+0x18>
		}
				
		/* check if the third push button at PA2 is pressed/not */
		else if(PINA & (1<<PA2))
 168:	ca 9b       	sbis	0x19, 2	; 25
 16a:	07 c0       	rjmp	.+14     	; 0x17a <main+0x4e>
		{
			// Stop the motor
			PORTC &= (~(1<<PC0));
 16c:	85 b3       	in	r24, 0x15	; 21
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	85 bb       	out	0x15, r24	; 21
			PORTC &= (~(1<<PC1));
 172:	85 b3       	in	r24, 0x15	; 21
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	85 bb       	out	0x15, r24	; 21
 178:	e5 cf       	rjmp	.-54     	; 0x144 <main+0x18>
		}		
		else if(PINA & (1<<PA3))
 17a:	cb 9b       	sbis	0x19, 3	; 25
 17c:	04 c0       	rjmp	.+8      	; 0x186 <main+0x5a>
		{
			// increase speed
			 Increase_Speed(128);
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	0e 94 3e 00 	call	0x7c	; 0x7c <Increase_Speed>
 184:	df cf       	rjmp	.-66     	; 0x144 <main+0x18>
		}	
		else if(PINA & (1<<PA4))
 186:	cc 9b       	sbis	0x19, 4	; 25
 188:	dd cf       	rjmp	.-70     	; 0x144 <main+0x18>
		{
			// decrease speed
			Decrease_Speed(128);
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	0e 94 6a 00 	call	0xd4	; 0xd4 <Decrease_Speed>
 190:	d9 cf       	rjmp	.-78     	; 0x144 <main+0x18>

00000192 <__subsf3>:
 192:	50 58       	subi	r21, 0x80	; 128

00000194 <__addsf3>:
 194:	bb 27       	eor	r27, r27
 196:	aa 27       	eor	r26, r26
 198:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__addsf3x>
 19c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_round>
 1a0:	0e 94 ab 01 	call	0x356	; 0x356 <__fp_pscA>
 1a4:	38 f0       	brcs	.+14     	; 0x1b4 <__addsf3+0x20>
 1a6:	0e 94 b2 01 	call	0x364	; 0x364 <__fp_pscB>
 1aa:	20 f0       	brcs	.+8      	; 0x1b4 <__addsf3+0x20>
 1ac:	39 f4       	brne	.+14     	; 0x1bc <__addsf3+0x28>
 1ae:	9f 3f       	cpi	r25, 0xFF	; 255
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <__addsf3+0x24>
 1b2:	26 f4       	brtc	.+8      	; 0x1bc <__addsf3+0x28>
 1b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_nan>
 1b8:	0e f4       	brtc	.+2      	; 0x1bc <__addsf3+0x28>
 1ba:	e0 95       	com	r30
 1bc:	e7 fb       	bst	r30, 7
 1be:	0c 94 a2 01 	jmp	0x344	; 0x344 <__fp_inf>

000001c2 <__addsf3x>:
 1c2:	e9 2f       	mov	r30, r25
 1c4:	0e 94 ca 01 	call	0x394	; 0x394 <__fp_split3>
 1c8:	58 f3       	brcs	.-42     	; 0x1a0 <__addsf3+0xc>
 1ca:	ba 17       	cp	r27, r26
 1cc:	62 07       	cpc	r22, r18
 1ce:	73 07       	cpc	r23, r19
 1d0:	84 07       	cpc	r24, r20
 1d2:	95 07       	cpc	r25, r21
 1d4:	20 f0       	brcs	.+8      	; 0x1de <__addsf3x+0x1c>
 1d6:	79 f4       	brne	.+30     	; 0x1f6 <__addsf3x+0x34>
 1d8:	a6 f5       	brtc	.+104    	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 1da:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__fp_zero>
 1de:	0e f4       	brtc	.+2      	; 0x1e2 <__addsf3x+0x20>
 1e0:	e0 95       	com	r30
 1e2:	0b 2e       	mov	r0, r27
 1e4:	ba 2f       	mov	r27, r26
 1e6:	a0 2d       	mov	r26, r0
 1e8:	0b 01       	movw	r0, r22
 1ea:	b9 01       	movw	r22, r18
 1ec:	90 01       	movw	r18, r0
 1ee:	0c 01       	movw	r0, r24
 1f0:	ca 01       	movw	r24, r20
 1f2:	a0 01       	movw	r20, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	ff 27       	eor	r31, r31
 1f8:	59 1b       	sub	r21, r25
 1fa:	99 f0       	breq	.+38     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 1fc:	59 3f       	cpi	r21, 0xF9	; 249
 1fe:	50 f4       	brcc	.+20     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 200:	50 3e       	cpi	r21, 0xE0	; 224
 202:	68 f1       	brcs	.+90     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 204:	1a 16       	cp	r1, r26
 206:	f0 40       	sbci	r31, 0x00	; 0
 208:	a2 2f       	mov	r26, r18
 20a:	23 2f       	mov	r18, r19
 20c:	34 2f       	mov	r19, r20
 20e:	44 27       	eor	r20, r20
 210:	58 5f       	subi	r21, 0xF8	; 248
 212:	f3 cf       	rjmp	.-26     	; 0x1fa <__addsf3x+0x38>
 214:	46 95       	lsr	r20
 216:	37 95       	ror	r19
 218:	27 95       	ror	r18
 21a:	a7 95       	ror	r26
 21c:	f0 40       	sbci	r31, 0x00	; 0
 21e:	53 95       	inc	r21
 220:	c9 f7       	brne	.-14     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 222:	7e f4       	brtc	.+30     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 224:	1f 16       	cp	r1, r31
 226:	ba 0b       	sbc	r27, r26
 228:	62 0b       	sbc	r22, r18
 22a:	73 0b       	sbc	r23, r19
 22c:	84 0b       	sbc	r24, r20
 22e:	ba f0       	brmi	.+46     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 230:	91 50       	subi	r25, 0x01	; 1
 232:	a1 f0       	breq	.+40     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 234:	ff 0f       	add	r31, r31
 236:	bb 1f       	adc	r27, r27
 238:	66 1f       	adc	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	88 1f       	adc	r24, r24
 23e:	c2 f7       	brpl	.-16     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 240:	0e c0       	rjmp	.+28     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 242:	ba 0f       	add	r27, r26
 244:	62 1f       	adc	r22, r18
 246:	73 1f       	adc	r23, r19
 248:	84 1f       	adc	r24, r20
 24a:	48 f4       	brcc	.+18     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 24c:	87 95       	ror	r24
 24e:	77 95       	ror	r23
 250:	67 95       	ror	r22
 252:	b7 95       	ror	r27
 254:	f7 95       	ror	r31
 256:	9e 3f       	cpi	r25, 0xFE	; 254
 258:	08 f0       	brcs	.+2      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 25a:	b0 cf       	rjmp	.-160    	; 0x1bc <__addsf3+0x28>
 25c:	93 95       	inc	r25
 25e:	88 0f       	add	r24, r24
 260:	08 f0       	brcs	.+2      	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 262:	99 27       	eor	r25, r25
 264:	ee 0f       	add	r30, r30
 266:	97 95       	ror	r25
 268:	87 95       	ror	r24
 26a:	08 95       	ret

0000026c <__fixunssfsi>:
 26c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fp_splitA>
 270:	88 f0       	brcs	.+34     	; 0x294 <__fixunssfsi+0x28>
 272:	9f 57       	subi	r25, 0x7F	; 127
 274:	98 f0       	brcs	.+38     	; 0x29c <__fixunssfsi+0x30>
 276:	b9 2f       	mov	r27, r25
 278:	99 27       	eor	r25, r25
 27a:	b7 51       	subi	r27, 0x17	; 23
 27c:	b0 f0       	brcs	.+44     	; 0x2aa <__fixunssfsi+0x3e>
 27e:	e1 f0       	breq	.+56     	; 0x2b8 <__fixunssfsi+0x4c>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	1a f0       	brmi	.+6      	; 0x290 <__fixunssfsi+0x24>
 28a:	ba 95       	dec	r27
 28c:	c9 f7       	brne	.-14     	; 0x280 <__fixunssfsi+0x14>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__fixunssfsi+0x4c>
 290:	b1 30       	cpi	r27, 0x01	; 1
 292:	91 f0       	breq	.+36     	; 0x2b8 <__fixunssfsi+0x4c>
 294:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fp_zero>
 298:	b1 e0       	ldi	r27, 0x01	; 1
 29a:	08 95       	ret
 29c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__fp_zero>
 2a0:	67 2f       	mov	r22, r23
 2a2:	78 2f       	mov	r23, r24
 2a4:	88 27       	eor	r24, r24
 2a6:	b8 5f       	subi	r27, 0xF8	; 248
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <__fixunssfsi+0x4c>
 2aa:	b9 3f       	cpi	r27, 0xF9	; 249
 2ac:	cc f3       	brlt	.-14     	; 0x2a0 <__fixunssfsi+0x34>
 2ae:	86 95       	lsr	r24
 2b0:	77 95       	ror	r23
 2b2:	67 95       	ror	r22
 2b4:	b3 95       	inc	r27
 2b6:	d9 f7       	brne	.-10     	; 0x2ae <__fixunssfsi+0x42>
 2b8:	3e f4       	brtc	.+14     	; 0x2c8 <__fixunssfsi+0x5c>
 2ba:	90 95       	com	r25
 2bc:	80 95       	com	r24
 2be:	70 95       	com	r23
 2c0:	61 95       	neg	r22
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	8f 4f       	sbci	r24, 0xFF	; 255
 2c6:	9f 4f       	sbci	r25, 0xFF	; 255
 2c8:	08 95       	ret

000002ca <__floatunsisf>:
 2ca:	e8 94       	clt
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <__floatsisf+0x12>

000002ce <__floatsisf>:
 2ce:	97 fb       	bst	r25, 7
 2d0:	3e f4       	brtc	.+14     	; 0x2e0 <__floatsisf+0x12>
 2d2:	90 95       	com	r25
 2d4:	80 95       	com	r24
 2d6:	70 95       	com	r23
 2d8:	61 95       	neg	r22
 2da:	7f 4f       	sbci	r23, 0xFF	; 255
 2dc:	8f 4f       	sbci	r24, 0xFF	; 255
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	99 23       	and	r25, r25
 2e2:	a9 f0       	breq	.+42     	; 0x30e <__floatsisf+0x40>
 2e4:	f9 2f       	mov	r31, r25
 2e6:	96 e9       	ldi	r25, 0x96	; 150
 2e8:	bb 27       	eor	r27, r27
 2ea:	93 95       	inc	r25
 2ec:	f6 95       	lsr	r31
 2ee:	87 95       	ror	r24
 2f0:	77 95       	ror	r23
 2f2:	67 95       	ror	r22
 2f4:	b7 95       	ror	r27
 2f6:	f1 11       	cpse	r31, r1
 2f8:	f8 cf       	rjmp	.-16     	; 0x2ea <__floatsisf+0x1c>
 2fa:	fa f4       	brpl	.+62     	; 0x33a <__floatsisf+0x6c>
 2fc:	bb 0f       	add	r27, r27
 2fe:	11 f4       	brne	.+4      	; 0x304 <__floatsisf+0x36>
 300:	60 ff       	sbrs	r22, 0
 302:	1b c0       	rjmp	.+54     	; 0x33a <__floatsisf+0x6c>
 304:	6f 5f       	subi	r22, 0xFF	; 255
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	8f 4f       	sbci	r24, 0xFF	; 255
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	16 c0       	rjmp	.+44     	; 0x33a <__floatsisf+0x6c>
 30e:	88 23       	and	r24, r24
 310:	11 f0       	breq	.+4      	; 0x316 <__floatsisf+0x48>
 312:	96 e9       	ldi	r25, 0x96	; 150
 314:	11 c0       	rjmp	.+34     	; 0x338 <__floatsisf+0x6a>
 316:	77 23       	and	r23, r23
 318:	21 f0       	breq	.+8      	; 0x322 <__floatsisf+0x54>
 31a:	9e e8       	ldi	r25, 0x8E	; 142
 31c:	87 2f       	mov	r24, r23
 31e:	76 2f       	mov	r23, r22
 320:	05 c0       	rjmp	.+10     	; 0x32c <__floatsisf+0x5e>
 322:	66 23       	and	r22, r22
 324:	71 f0       	breq	.+28     	; 0x342 <__floatsisf+0x74>
 326:	96 e8       	ldi	r25, 0x86	; 134
 328:	86 2f       	mov	r24, r22
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	2a f0       	brmi	.+10     	; 0x33a <__floatsisf+0x6c>
 330:	9a 95       	dec	r25
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	da f7       	brpl	.-10     	; 0x330 <__floatsisf+0x62>
 33a:	88 0f       	add	r24, r24
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	97 f9       	bld	r25, 7
 342:	08 95       	ret

00000344 <__fp_inf>:
 344:	97 f9       	bld	r25, 7
 346:	9f 67       	ori	r25, 0x7F	; 127
 348:	80 e8       	ldi	r24, 0x80	; 128
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	08 95       	ret

00000350 <__fp_nan>:
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	80 ec       	ldi	r24, 0xC0	; 192
 354:	08 95       	ret

00000356 <__fp_pscA>:
 356:	00 24       	eor	r0, r0
 358:	0a 94       	dec	r0
 35a:	16 16       	cp	r1, r22
 35c:	17 06       	cpc	r1, r23
 35e:	18 06       	cpc	r1, r24
 360:	09 06       	cpc	r0, r25
 362:	08 95       	ret

00000364 <__fp_pscB>:
 364:	00 24       	eor	r0, r0
 366:	0a 94       	dec	r0
 368:	12 16       	cp	r1, r18
 36a:	13 06       	cpc	r1, r19
 36c:	14 06       	cpc	r1, r20
 36e:	05 06       	cpc	r0, r21
 370:	08 95       	ret

00000372 <__fp_round>:
 372:	09 2e       	mov	r0, r25
 374:	03 94       	inc	r0
 376:	00 0c       	add	r0, r0
 378:	11 f4       	brne	.+4      	; 0x37e <__fp_round+0xc>
 37a:	88 23       	and	r24, r24
 37c:	52 f0       	brmi	.+20     	; 0x392 <__fp_round+0x20>
 37e:	bb 0f       	add	r27, r27
 380:	40 f4       	brcc	.+16     	; 0x392 <__fp_round+0x20>
 382:	bf 2b       	or	r27, r31
 384:	11 f4       	brne	.+4      	; 0x38a <__fp_round+0x18>
 386:	60 ff       	sbrs	r22, 0
 388:	04 c0       	rjmp	.+8      	; 0x392 <__fp_round+0x20>
 38a:	6f 5f       	subi	r22, 0xFF	; 255
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	8f 4f       	sbci	r24, 0xFF	; 255
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	08 95       	ret

00000394 <__fp_split3>:
 394:	57 fd       	sbrc	r21, 7
 396:	90 58       	subi	r25, 0x80	; 128
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	59 f0       	breq	.+22     	; 0x3b4 <__fp_splitA+0x10>
 39e:	5f 3f       	cpi	r21, 0xFF	; 255
 3a0:	71 f0       	breq	.+28     	; 0x3be <__fp_splitA+0x1a>
 3a2:	47 95       	ror	r20

000003a4 <__fp_splitA>:
 3a4:	88 0f       	add	r24, r24
 3a6:	97 fb       	bst	r25, 7
 3a8:	99 1f       	adc	r25, r25
 3aa:	61 f0       	breq	.+24     	; 0x3c4 <__fp_splitA+0x20>
 3ac:	9f 3f       	cpi	r25, 0xFF	; 255
 3ae:	79 f0       	breq	.+30     	; 0x3ce <__fp_splitA+0x2a>
 3b0:	87 95       	ror	r24
 3b2:	08 95       	ret
 3b4:	12 16       	cp	r1, r18
 3b6:	13 06       	cpc	r1, r19
 3b8:	14 06       	cpc	r1, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	f2 cf       	rjmp	.-28     	; 0x3a2 <__fp_split3+0xe>
 3be:	46 95       	lsr	r20
 3c0:	f1 df       	rcall	.-30     	; 0x3a4 <__fp_splitA>
 3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__fp_splitA+0x30>
 3c4:	16 16       	cp	r1, r22
 3c6:	17 06       	cpc	r1, r23
 3c8:	18 06       	cpc	r1, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	f1 cf       	rjmp	.-30     	; 0x3b0 <__fp_splitA+0xc>
 3ce:	86 95       	lsr	r24
 3d0:	71 05       	cpc	r23, r1
 3d2:	61 05       	cpc	r22, r1
 3d4:	08 94       	sec
 3d6:	08 95       	ret

000003d8 <__fp_zero>:
 3d8:	e8 94       	clt

000003da <__fp_szero>:
 3da:	bb 27       	eor	r27, r27
 3dc:	66 27       	eor	r22, r22
 3de:	77 27       	eor	r23, r23
 3e0:	cb 01       	movw	r24, r22
 3e2:	97 f9       	bld	r25, 7
 3e4:	08 95       	ret

000003e6 <__mulsf3>:
 3e6:	0e 94 06 02 	call	0x40c	; 0x40c <__mulsf3x>
 3ea:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_round>
 3ee:	0e 94 ab 01 	call	0x356	; 0x356 <__fp_pscA>
 3f2:	38 f0       	brcs	.+14     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3f4:	0e 94 b2 01 	call	0x364	; 0x364 <__fp_pscB>
 3f8:	20 f0       	brcs	.+8      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3fa:	95 23       	and	r25, r21
 3fc:	11 f0       	breq	.+4      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3fe:	0c 94 a2 01 	jmp	0x344	; 0x344 <__fp_inf>
 402:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_nan>
 406:	11 24       	eor	r1, r1
 408:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__fp_szero>

0000040c <__mulsf3x>:
 40c:	0e 94 ca 01 	call	0x394	; 0x394 <__fp_split3>
 410:	70 f3       	brcs	.-36     	; 0x3ee <__mulsf3+0x8>

00000412 <__mulsf3_pse>:
 412:	95 9f       	mul	r25, r21
 414:	c1 f3       	breq	.-16     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 416:	95 0f       	add	r25, r21
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	55 1f       	adc	r21, r21
 41c:	62 9f       	mul	r22, r18
 41e:	f0 01       	movw	r30, r0
 420:	72 9f       	mul	r23, r18
 422:	bb 27       	eor	r27, r27
 424:	f0 0d       	add	r31, r0
 426:	b1 1d       	adc	r27, r1
 428:	63 9f       	mul	r22, r19
 42a:	aa 27       	eor	r26, r26
 42c:	f0 0d       	add	r31, r0
 42e:	b1 1d       	adc	r27, r1
 430:	aa 1f       	adc	r26, r26
 432:	64 9f       	mul	r22, r20
 434:	66 27       	eor	r22, r22
 436:	b0 0d       	add	r27, r0
 438:	a1 1d       	adc	r26, r1
 43a:	66 1f       	adc	r22, r22
 43c:	82 9f       	mul	r24, r18
 43e:	22 27       	eor	r18, r18
 440:	b0 0d       	add	r27, r0
 442:	a1 1d       	adc	r26, r1
 444:	62 1f       	adc	r22, r18
 446:	73 9f       	mul	r23, r19
 448:	b0 0d       	add	r27, r0
 44a:	a1 1d       	adc	r26, r1
 44c:	62 1f       	adc	r22, r18
 44e:	83 9f       	mul	r24, r19
 450:	a0 0d       	add	r26, r0
 452:	61 1d       	adc	r22, r1
 454:	22 1f       	adc	r18, r18
 456:	74 9f       	mul	r23, r20
 458:	33 27       	eor	r19, r19
 45a:	a0 0d       	add	r26, r0
 45c:	61 1d       	adc	r22, r1
 45e:	23 1f       	adc	r18, r19
 460:	84 9f       	mul	r24, r20
 462:	60 0d       	add	r22, r0
 464:	21 1d       	adc	r18, r1
 466:	82 2f       	mov	r24, r18
 468:	76 2f       	mov	r23, r22
 46a:	6a 2f       	mov	r22, r26
 46c:	11 24       	eor	r1, r1
 46e:	9f 57       	subi	r25, 0x7F	; 127
 470:	50 40       	sbci	r21, 0x00	; 0
 472:	9a f0       	brmi	.+38     	; 0x49a <__stack+0x3b>
 474:	f1 f0       	breq	.+60     	; 0x4b2 <__stack+0x53>
 476:	88 23       	and	r24, r24
 478:	4a f0       	brmi	.+18     	; 0x48c <__stack+0x2d>
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	bb 1f       	adc	r27, r27
 480:	66 1f       	adc	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	91 50       	subi	r25, 0x01	; 1
 488:	50 40       	sbci	r21, 0x00	; 0
 48a:	a9 f7       	brne	.-22     	; 0x476 <__stack+0x17>
 48c:	9e 3f       	cpi	r25, 0xFE	; 254
 48e:	51 05       	cpc	r21, r1
 490:	80 f0       	brcs	.+32     	; 0x4b2 <__stack+0x53>
 492:	0c 94 a2 01 	jmp	0x344	; 0x344 <__fp_inf>
 496:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__fp_szero>
 49a:	5f 3f       	cpi	r21, 0xFF	; 255
 49c:	e4 f3       	brlt	.-8      	; 0x496 <__stack+0x37>
 49e:	98 3e       	cpi	r25, 0xE8	; 232
 4a0:	d4 f3       	brlt	.-12     	; 0x496 <__stack+0x37>
 4a2:	86 95       	lsr	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b7 95       	ror	r27
 4aa:	f7 95       	ror	r31
 4ac:	e7 95       	ror	r30
 4ae:	9f 5f       	subi	r25, 0xFF	; 255
 4b0:	c1 f7       	brne	.-16     	; 0x4a2 <__stack+0x43>
 4b2:	fe 2b       	or	r31, r30
 4b4:	88 0f       	add	r24, r24
 4b6:	91 1d       	adc	r25, r1
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	97 f9       	bld	r25, 7
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
